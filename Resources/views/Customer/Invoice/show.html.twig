{% extends "::base.html.twig" %}

{% use 'TerramarSalesBundle:Customer:_subnav.html.twig' %}

{% block title %}{{ entity }}{% endblock %}

{% block content %}
    <div id="invoice_alert" class="alert-box error"></div>
    <h4 style="margin: 0 0 10px 0">
        Invoice Detail
        <span class="label {{ invoice.paid ? 'label-success' : 'label-info' }}">{{ invoice.status }}</span>
        <span class="pull-right">Account Credit: ${{ profile.pointsAccount.balance|default(0)|number_format(2) }}</span>
    </h4>
    <form id="invoice" action="{{ path('customer_invoice_process', { id: entity.id, invoiceid: invoice.id }) }}" method="post" {{ form_enctype(form) }}>
    <table class="table records_list center-vertically">
    <thead>
        <tr>
            <th style="width: 400px">Item Description</th>
            <th style="width: 100px">Paid</th>
            <th style="width: 115px">Price</th>
            <th>Balance</th>
            <th class="delete-record"></th>
        </tr>
    </thead>
    <tbody class="invoice-body" data-prototype="{% filter escape %}{% include 'TerramarSalesBundle:Customer/Invoice:_paymentRow.html.twig' with { form: form.payments.vars.prototype } %}{% endfilter %}">
    {% set balance = 0 %}
    {% for item in invoice.items %}
        {% set balance = balance + item.price %}
        <tr>
            <td>{{ item.description }}</td>
            <td></td>
            <td>{{ item.price }}</td>
            <td>{{ balance|number_format(2) }}</td>
            <td class="delete-record"></td>
        </tr>
    {% endfor %}
    {% for invoiceTransaction in invoice.invoiceTransactions %}
        {% set transaction = invoiceTransaction.transaction %}
        {% if transaction.isParent and transaction.status.value == 'Approved' %}
            {% set balance = balance - transaction.amount %}
        <tr>
            <td>{{ transaction.network }} {{ transaction.type }}: {{ transaction.status }} {{ (transaction.refunded ? '<span class="label label-success">Refunded</span>' : '')|raw }}</td>
            <td>{{ invoiceTransaction.pastDue ? 'Past Due' : 'On Time' }}</td>
            <td>-{{ transaction.amount }}</td>
            <td>{{ balance|number_format(2) }}</td>
            <td>{% if is_granted('ROLE_INVOICE_REFUND') and not transaction.refunded %}<a class="refund btn btn-success btn-small" href="{{ path('customer_invoice_refund', { id: entity.id, invoiceid: invoice.id, transactionid: transaction.id }) }}">Refund</a>{% endif %}</td>
        </tr>
        {% endif %}
    {% endfor %}
    {% for form in form.payments %}
        {% include 'TerramarSalesBundle:Customer/Invoice:_paymentRow.html.twig' with { form: form } %}
    {% endfor %}
    </tbody>
    <tfoot>
        <tr class="balance">
            <td colspan="3"></td>
            <td class="balance-value" style="font-weight: bolder; color: black">0.00</td>
            <td></td>
        </tr>
    </tfoot>
</table>
<div class="hidden">
{{ form_rest(form) }}
</div>
    {% if not invoice.paid %}
<div class="row-fluid">
    <div class="span6">
        <a href="javascript:;" class="add-payment btn btn-success">Add Payment</a> &nbsp;
        <button type="submit" class="save-process btn btn-primary">Save and Process Payment</button>
    </div>
</div>
    {% endif %}
{% endblock %}

{% block additional_javascripts %}
<script type="text/javascript">
    var invoiceManager = (function($, customerId, invoiceId) {
        var _current = {{ form.payments|length - 1 }},
            _balance = parseFloat({{ invoice.balance|json_encode|raw }}),
            _customerId = {{ entity.id|json_encode|raw }},
            _invoiceId = {{ invoice.id|json_encode|raw }},
            _$invoiceBody = $('.invoice-body'),
            _$balance = $('.balance'),
            _$saveButton = $('.save-process'),
            _prototype = _$invoiceBody.data('prototype');

        var _simpleAccountsHtml = '{% include 'TerramarSalesBundle:Customer/Invoice:_accounts.html.twig' with { accounts: profile.simpleAccounts } %}',
            _bankAccountsHtml = '{% include 'TerramarSalesBundle:Customer/Invoice:_accounts.html.twig' with { accounts: profile.bankAccounts } %}',
            _cardAccountsHtml = '{% include 'TerramarSalesBundle:Customer/Invoice:_accounts.html.twig' with { accounts: profile.cardAccounts } %}',
            _pointsAccountsHtml = '{% include 'TerramarSalesBundle:Customer/Invoice:_accounts.html.twig' with { accounts: [ profile.pointsAccount ] } %}';

        function _wireHandlers(row) {
            var $row = _$invoiceBody.find('tr[row="' + row + '"]'),
                $accountSelect = $('.payment-account', $row);

            $row.find('.payment-method').change(function() {
                var val = $(this).val();

                if (val == 'Card') {
                    $accountSelect.html(_cardAccountsHtml).show();
                } else if (val == 'ACH') {
                    $accountSelect.html(_bankAccountsHtml).show();
                } else {
                    $accountSelect.html(val == 'Points' ? _pointsAccountsHtml : _simpleAccountsHtml).hide();
                }
            }).change();

            $('.payment-amount', $row).formatCurrency(true, _balance, function() { invoiceManager.calculateBalance(); });

            $('.remove-payment', $row).click(function() { invoiceManager.removeRow(row); });
        }

        $(function() {
            invoiceManager.init();
        });

        return {
            init: function() {
                $('.add-payment').click(function() { invoiceManager.addRow(); });

                $('.refund').click(function(e) {
                    e.preventDefault();

                    if (confirm('Are you sure you want to refund this transaction?')) {
                        terramar.jsonRequest($(this).attr('href'));
                    }
                });

                invoiceManager.calculateBalance();

                {% for form in form.payments %}
                _wireHandlers({{ form.get('name') }});
                _$invoiceBody.find('tr[row="{{ form.get('name') }}"]').find('.payment-account').val({{ form.vars.data.account.id|default }});
                {% endfor %}
            },

            addRow: function(callback) {
                _current++;
                var row = _prototype.replace(/__name__/g, _current);

                _$invoiceBody.append(row);
                _wireHandlers(_current);
            },

            removeRow: function(row) {
                $('tr[row="' + row + '"], tr.error-' + row).remove();

                invoiceManager.calculateBalance();
            },

            calculateBalance: function() {
                $('#invoice_alert').hide();

                var balance = _balance,
                    amount;

                $('.payment-amount').each(function() {
                    amount = parseFloat($(this).val());
                    if (isNaN(amount)) { amount = 0; }
                    balance -= amount;
                });

                $('.balance-value', _$balance).html(parseFloat(balance).toFixed(2));

                if (balance < 0) {
                    _$saveButton.attr('disabled', true);
                    terramar.showAlert('#invoice_alert', 'Payments exceed invoice amount. Adjust payments so ending balance is 0.00', 'error');
                } else if (balance == _balance) {
                    _$saveButton.attr('disabled', true);
                } else {
                    _$saveButton.attr('disabled', false);
                }
            }
        };
    })(jQuery);
</script>
{% endblock %}
